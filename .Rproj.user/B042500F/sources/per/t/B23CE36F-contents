#' ---
#' title: "Spider Ant Mimics"
#' author: "Andrew Burchill"
#' date: "2019-06-19"
#' output:
#'    html_document:
#'       theme: lumen
#'       code_folding: "hide"
#'       toc: true
#'       toc_float: 
#'         collapsed: false
#'         smooth_scroll: true
#'       
#' always_allow_html: yes  
#' ---
#' 

#+ setup, include=FALSE

#___Packages and Functions################
library(trajr)
library(GeneCycle)
library(readr)
library(tidyverse)
library(magrittr)
library(gsubfn)
library(ggfortify)
library(segclust2d)
library(factoextra)
library(multcomp)
library(sandwich)


PCA_it <- function(pca.stated, ...){
  pca.stated %<>% 
    mutate(species = species %>% 
             recode_factor("M.bicolor" = "M .bicolor",
                    "O.haddoni" = "O. haddoni",
                    "O.major" = "O. major",
                    "M.luctuosa" = "M. luctuosa",
                    "Smallgoldpoly" = "P. aurea",
                    "Goldcampo" = "C. bigenus"
                    ))
  
  
  col.list <- quos(...)
  prcomped <-
    pca.stated %>% 
    select(!!!col.list) %>% 
    prcomp(scale. = TRUE, center=TRUE) 
    
  autoplot(prcomped,
           data=pca.stated %>% set_rownames(pca.stated$name),
           colour="species", label=T,
           loadings = TRUE, loadings.colour = 'blue',
           loadings.label = TRUE, loadings.label.size = 3, size=5, x=1,y=2) %>%
    plot()
  
  fviz_pca_ind(prcomped,
               label="none",
               col.ind = pca.stated$species, # color by groups
               addEllipses = TRUE, # Concentration ellipses
               ellipse.type = "convex",
               ellipse.level=0.99,
               legend.title = "Groups",
               repel = TRUE) %>% 
    plot()
  invisible(readline(prompt="Press [enter] to continue"))
  
  
  PC1_results <-
    bind_cols(species=pca.stated$species,PC1=prcomped$x[,1]) 
  
  boxplot(PC1 ~ species, data=PC1_results, main="PC1 values across species")
  
  
  #https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2847912/pdf/pone.0009788.pdf
  #this method is good
  model <- aov(PC1 ~ species, data=PC1_results)
  
  mc = glht(model,
            mcp(species = "Tukey"),vcov=vcovHC)
  
  mcs = summary(mc, test=adjusted("single-step"))
  cld(mcs,
      level=0.05,
      decreasing=TRUE) %>% print()
  return(PC1_results)
}




#setwd("C:/Users/Andrew Burchill/Dropbox (ASU)/Ant mimic strobing/Finished")
#setwd("D:/Weaver ants/Dropbox (ASU)/Ant mimic strobing/Finished")

#Functions below
{ 
  remove_outliers <- function(x, na.rm = TRUE, ...) {
    qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
    H <- 1.5 * IQR(x, na.rm = na.rm)
    y <- x
    y[x < (qnt[1] - H)] <- NA
    y[x > (qnt[2] + H)] <- NA
    y
  }  
  
  cvs_reader_func <- function(filename, stringsAsFactors = FALSE) {
    read_csv(filename,
             col_types = cols_only(frame = col_guess(), 
                                   t = col_guess(), 
                                   x = col_guess(),  
                                   y = col_guess()
             ),
             skip = 1) %>% return()
  }
  
  nobu <- function(speed.vector, fraction = 5){
    ### look for ultradian rhythms using this
    
    ################# Modified from code by Nobuaki Mizumoto
    
    da <- speed.vector
    
    N <- length(da)
    xmean <- mean(da)
    how.long <- round(N / fraction) #don't want it to have less than 5 cycles
    
    #qp1per is Qp 1%. for statistical significant. can also use 5%
    P = Qp1per = Qp = rep(0, how.long - 1)    
    for (j in 2:how.long) {
      P[j - 1] <- j  #P is the period
      
      #divides the data into a matrix with j-1 rows
      #I don't want it to keep saying 'data length is not a sub-multiple or multiple of the number of rows'
      suppressWarnings(   
        rhythm.tab <- matrix(da, ncol = P[j - 1], byrow = T)
      )   
      y <- rep(0, P[j - 1])
      for (i in 1:P[j - 1]) {
        y[i] <- mean(rhythm.tab[, i])   #this, like, averages each col?
      }
      K <- length(rhythm.tab[, 1])
      
      Qp[j - 1] <- K * N * sum((y - xmean) ^ 2) / sum((da - xmean) ^ 2)
      Qp1per[j - 1] <- qchisq(0.99, P[j - 1] - 1)
    }
    res <- data.frame(P = P, Qp1per = Qp1per, Qp = Qp)
    
    diff <- Qp - Qp1per
    
    biggest <- P[diff == max(diff)] / 240  #divide by 240 SECONDS fps
    
    #par(pin = c(4, 3))
    # plot(P / 240, Qp, type = "l", xlab = "time (second)")
    # points(P / 240, Qp1per, type = "l", col = 2)
    # abline(v = biggest, col = "blue")
    
    
    return(max(diff))
    
    
    #find top 5% of points
    #perc <- 5
    #which(diff > quantile(diff, prob = 1 - perc/100))
    
    
  }
  
  intervaler <- function(traj, greatthan = 0, ps = 1, ns = 11,
                         cutoffspeed = 0.1, display = FALSE, getdbs=FALSE) {
    filename <- attr(traj, "filename")
    
    #calculate the intervals of stopping
    traj %>%
      TrajSmoothSG(p = ps, n = ns) %>% 
      TrajSpeedIntervals(slowerThan = cutoffspeed) -> intervals 
    #remove PAUSES that are not really part of the gait
    intervals<-intervals[intervals$duration<.25,]
    plot(intervals, main = filename)
    
    #calculate the intervals of MOVING (less used)
    traj %>%
      TrajSmoothSG(p = ps, n = ns) %>% 
      TrajSpeedIntervals(fasterThan = cutoffspeed) -> REVERSEintervals 
    
    #print the number of intervals of each type
    if (display) print(
      paste0(
        "stopped intervals: ", length(intervals$duration),
        ". MOVING intervals: ", length(REVERSEintervals$duration)))
    
    if (getdbs==T) {
      list(
        intervals =  intervals,
        REVERSEintervals = REVERSEintervals,
        freqs = intervals$startTime %>% diff() %>% magrittr::extract(. > greatthan)
      ) %>% 
        return()
      
    } else {
      #stop if there aren't enough intervals
      if (nrow(intervals) > 1 & nrow(REVERSEintervals) > 1) {
        
        #get the "frequencies" of stop-start "waves"
        freqs <- 
          intervals$startTime %>% 
          diff() %>% 
          magrittr::extract(. > greatthan)
        
        #then get the durations of stops and starts
        stopdurs <- intervals$duration %>% magrittr::extract(. > greatthan)
        movedurs <- REVERSEintervals$duration %>% magrittr::extract(. > greatthan)
        
        #plot the densities of these durations
        if (display) {
          print(
            ggplot() + labs(fill = "type", title = filename) +
              geom_density(data = data.frame(x = freqs), 
                           aes(x = x, fill = "freq"), alpha = 0.4) + 
              geom_density(data = data.frame(y = stopdurs),
                           aes(x = y, fill = "stop"), alpha = 0.4) +
              geom_density(data = data.frame(z = movedurs),
                           aes(x = z, fill = "move"), alpha = 0.4) +
              xlim(-0.01, 1.5) + 
              scale_fill_manual(
                name = "vars", guide = "legend",
                values = c("freq" = "red", "stop" = "yellow", "move" = "blue"),
                labels = c("freq" = "stop-start duration", "stop" = "stop durations", "move" =  "movement durations")) 
            
          )
        }
        
        # combined <- NULL
        # #include a thing that makes a DB of durations of stops and starts
        # combined <- gdata::combine(intervals, REVERSEintervals)
        # combined <- combined[order(combined$startFrame),]
        # #remove first and last breaks (they could be cut off)
        # combined <- combined %>% slice(-n()) %>% slice(-1)
        # combined <- combined %>% select(duration, source) %>% mutate(filename = filename)
        # INTERVAL.DB <<- rbind(INTERVAL.DB, combined)
        
        
        
        #return all the values
        list(
          med_freqs = median(freqs),
          sd_freqs = sd(freqs),
          med_stopdurs = median(stopdurs),
          sd_stopdurs = sd(stopdurs),
          med_movedurs = median(movedurs),
          sd_movedurs = sd(movedurs),
          prop_time_stopped = sum(stopdurs)/max(traj$time)+0
        ) %>% return()
      } else {
        
        list(
          med_freqs = NA,
          sd_freqs = NA,
          med_stopdurs = NA,
          sd_stopdurs = NA,
          med_movedurs = NA,
          sd_movedurs = NA,
          prop_time_stopped = 0
        ) %>% return()
      }}
    
  }
  
  stat_generator <- function(traj){
    cutoffspeed = 0.1
    filename <- attr(traj, "filename")
    
    #create a list of speeds over time
    ############ Hey! Tracker speeds and TrajR-calculated speeds differ!#######
    traj %>% 
      TrajSmoothSG(p = 1, n = 11) %>%
      TrajDerivatives() %>% pluck("speed") -> smoothspeed
    traj %>% TrajDerivatives() %>% pluck("speed") -> rawspeed
    
    #get the speed ONLY during movement
    movespeed <- rawspeed %>% magrittr::extract(. > cutoffspeed)
    
    #get the stop-start interval variables
    int_vars <- intervaler(traj, display = FALSE)
    
    #Measures of straightness
    straightness <- TrajStraightness(traj)
    resampled <- TrajRediscretize(traj, .001)  #should I pick a different value?
    Emax <- TrajEmax(resampled)
    
    #attempts to get a spectral value...
    
    #detspeed <- pracma::detrend(rawspeed)
    #detspeed <- ts(detspeed, frequency = 31536000, start = 0)
    #I'm only getting the index? not useful really
    #spect <- GeneCycle::robust.spectrum(detspeed) 
    dfreqs <- dominant.freqs(rawspeed, 3)
    #acf(detspeed, main = filename)
    nobud <- nobu(rawspeed)
    title(filename)
    
    
    list(
      int_vars,
      med_movespeed = median(movespeed),
      sd_movespeed = sd(movespeed),
      straightness = straightness,
      Emax = Emax,
      dfreq1 = dfreqs[1],
      dfreq2 = dfreqs[2],
      dfreq3 = dfreqs[3],
      nobu = nobud,
      avg.speed = mean(rawspeed),
      sd.speed = sd(rawspeed),
      total_time = traj$time %>% tail(1)
    ) %>% flatten() %>% return()
    
  }
  
  # Custom PCA plotting function
  customPcaPlot <- function(x, xlabs, xcols, choices = 1L:2L, ycol = "#ff2222aa", ...) {
    # Draw points
    pts <- t(t(x$x[, choices]))
    plot(pts, type = "p", 
         xlim = extendrange(pts[, 1L]), ylim = extendrange(pts[, 2L]), 
         asp = 1,
         xlab = "PC1", ylab = "PC2", pch = 16, col = xcols, ...)
    text(pts, labels = xlabs, pos = 1, ...)
    
    # Draw arrows
    axs <- t(t(x$rotation[, choices])) * 3.5
    text(axs, labels = dimnames(axs)[[1L]], col = ycol, ...)
    arrows(0, 0, axs[, 1L] * .8, axs[, 2L] * .8, length = .1, col = ycol)
  }
  
  pca_maker <- function(stats, cutdownsource = F, keep.nas = FALSE, excluded.species = NULL, ...){
    col.list <- quos(...)
    
    #remove excluded species
    `%not_in%` <- purrr::negate(`%in%`)
    if (!is.null(excluded.species)) {stats <- stats %>% filter(species %not_in% excluded.species)}
    
    #remove or keep NAs
    if (keep.nas == FALSE) stats <- na.omit(stats);
    
    #use this for plotting
    all.pca.stats <- stats
    
    #remove columns that shouldn't be included
    excluded.cols <- c("individual", "species", "run")
    pca.stats <- stats %>% select(-one_of(excluded.cols))
    
    
    #select (or not) subset of columns to use
    if (length(col.list) >= 1) pca.stats <- pca.stats %>% select(!!!col.list);
    
    # Perform the PCA
    PCA <- prcomp(pca.stats, scale. = TRUE, center=TRUE)
    # Plot it using custom plotting function. Could just call biplot instead
    customPcaPlot(PCA, stats$individual, stats$species, cex = .8)
    #legend("bottomleft", c("Spider", "Mimic", "Ant"), pch = 16, 
    #       col = c('red', 'blue', 'black'), inset = c(0.01, .02))
    
    if (cutdownsource==F)  return(PCA) else return(all.pca.stats)
    
  }
  
  
}

#___Begin################

path = "D:/Weaver ants/Dropbox (ASU)/Ant mimic strobing/Finished/"
files <- list.files(
  path= path,
  pattern = "[_][ABCDEF][.]csv", recursive = T
) %>% 
  paste0("D:/Weaver ants/Dropbox (ASU)/Ant mimic strobing/Finished/",.)

trajs <- NULL
for (i in files) {
  print(i)
  
  #create a temp trajectory from the filename
  i %>% cvs_reader_func() %>%
    TrajFromCoords(xCol = "x", yCol = "y", fps = 240, timeUnits = "s") -> traj
  
  #give them a filename attribute (for plotting labels)
  
  attr(traj, "full.filename") <- i
  attr(traj, "filename") <- i %>% 
    strapplyc(paste0(
      str_sub(path,-5,-2),   #this is the "shed" from "Finished"
      "[/]([[:print:]]+[_][ABCDEF])[.]csv"
    ), simplify = T)
  
  trajs[[attr(traj, "filename")]] <- traj
  
}



#' # Intro for Jim
#' 
#' So, here's a refresher: Opisthopsis major and Opisthopsis haddoni are two
#' similarly colored strobe ants. Myrmerachne bicolor looks JUST like them 
#' (especially O.haddoni) and is said to be their mimic!
#' 
#' We were wondering whether Myrmerachne mimics their weird strobing gait.
#' Myrmerachne luctuosa mimics black and gold ants (there's a huge mimicry ring) 
#' and is closely related (they're in the same genus) to M.bicolor. So if 
#' M.bicolor is mimicking strobe ants, we'd expect it to have a more similar gait
#' to the weird ants it mimics, not its close relative.
#' 
#' ## Methods
#' 
#' So, following the methods from Waters and McGlynn (http://leaflitter.org/wp-content/uploads/2018/08/2018WatersMyrmNews-Strobe-ants.pdf), we got trajectories
#' from the ants and spiders. My plan was to do something very similar to your
#' work on wasp and bee mimics: make a PCA and then see what happens!
#' 
#' We could get things like speed, turning angle, sinuousity, etc, but what we
#' primarily cared about was the stop-and-start strobing. So we got the duration 
#' of starts and stops in their movement, the movement speed, the standard 
#' deviation of these values, etc. However, since the normal non-strobing ants
#' don't have stops and starts, it's kinda hard to include them in the analysis.
#' 
#' (I'm working on a way to get periods, rhythmicity, and synchrony from time
#' series WITHOUT having to discretize them, but we'll see how that works and
#' whether we even really need that.)
#' 


#+ first, out.width=c('50%', '50%'), fig.show='hold'

big.db <-
 trajs %>% 
  mutate(species = name %>% strapplyc("(.+)[0-9]_[A-Z]$", s=T) %>% as.factor(),
         individual = name %>% strapplyc("(.+[0-9])_[A-Z]$", s=T) %>% as.factor()
  )

big.db <- 
  TrajsMergeStats(big.db$traj, stat_generator) %>%
  bind_cols(big.db, .)


######Specific to Stop-starts############

#+ noshow, include=FALSE
big.db$intervals <-
  lapply(big.db$traj, function(x) intervaler(x, getdbs = T) %>% .$intervals)
big.db$REVERSEintervals <-
  lapply(big.db$traj, function(x) intervaler(x, getdbs = T) %>% .$REVERSEintervals)
big.db$freqs <-
  lapply(big.db$traj, function(x) intervaler(x, getdbs = T) %>% .$freqs)


per.ind <-
 # big.db[{big.db$freqs %>%  map(.,~length(.)>2) %>% unlist()},] %>%
  big.db %>% 
  #filter(name!="O.haddoni2_B",name!="O.haddoni4_B",name!="O.major1_x", name!="O.major7_A", name!="M.bicolor7_A",name!="Smallgoldpoly1_A",name!="Smallgoldpoly1_B") %>% 
  group_by(individual, species) %>%
  summarize(
    med_stopdurs = bind_rows(intervals) %>%
      filter(duration<.25) %>% 
      .$duration %>% median(),
    sd_stopdurs = bind_rows(intervals) %>%
      filter(duration<.25) %>%
      .$duration %>% sd(),
    mad_stopdurs = bind_rows(intervals) %>%
      filter(duration<.25) %>% 
      .$duration %>% mad(),
    med_movedurs = bind_rows(REVERSEintervals) %>%
      .$duration %>% median(),
    sd_movedurs = bind_rows(REVERSEintervals) %>%
      .$duration %>% sd(),
    mad_movedurs = bind_rows(REVERSEintervals) %>%
      .$duration %>% mad(),
    # med_freqs = unlist(freqs) %>%
    #   median(),
    sd_freqs = unlist(freqs) %>%
      sd(),
    mad_freqs = unlist(freqs) %>%
      mad()
  ) %>% ungroup() %>% select(-starts_with("sd"))


pca.stated <- per.ind %>% na.omit()
PCA_it(pca.stated,-individual,-species)

#########Get rhythmicity stuff###############

for (i in trajs$traj) i %>% TrajSmoothSG(p = 1, n = 11) %>%  TrajDerivatives() %>% .$speed %>%  t() %>% write.matrix(file=paste0("sync/",attr(i,"filename"),".csv"), sep=",")

#get the rhythmicity stuff
ant_time_series <- read_csv("D:/Weaver ants/Dropbox (ASU)/Ant mimic strobing/Finished/ant_time_series.txt") #ant_time_series <- read_csv("sync/ant_time_series.txt")
ant_time_series$Colony %<>% substr(.,1,nchar(.)-4)
ant_time_series%<>% rename(name=Colony)
big.db2 <- full_join(ant_time_series, big.db)

########Plot individuals with rhythmicity#########

per.ind <-
  big.db2 %>%
  filter(name!="O.haddoni2_B",name!="O.haddoni4_B",name!="O.major1_x", name!="O.major7_A", name!="M.bicolor7_A",name!="Smallgoldpoly1_A",name!="Smallgoldpoly1_B") %>% 
  group_by(individual, species) %>%
  summarize(
   # med_sync = log(median(Synchrony)),
   # med_rhy = log(median(Rhythmicity)),
   # med_per = median(Period),
   # med_str = median(straightness)
    sync = log(weighted.mean(Synchrony, total_time)),
    rhy = log(weighted.mean(Rhythmicity, total_time)),
    per = (weighted.mean(Period, total_time)),
    str = car::logit(weighted.mean(straightness, total_time)),
    stopped = weighted.mean(prop_time_stopped, total_time),
    speed = log(weighted.mean(avg.speed, total_time))
    #sd_speed = log(weighted.mean(sd.speed, total_time))
    
  ) %>% ungroup() %>% mutate(per=bestNormalize::boxcox(per)$x.t)

#make sure they're all normal
per.ind %>% summarize_at(vars(-individual,-species), ~shapiro.test(.)$p.value)

PCA_it(per.ind, -individual, -species) -> test
agricolae::kruskal(test$PC1, test$species,group=TRUE,p.adj="bonferroni")$groups


#################LDA stuff?



per.ind %>% 
  mutate(
    group = case_when(
      .$species == "Goldcampo" ~ "normal ants",
      .$species == "Smallgoldpoly" ~ "normal ants",
      .$species == "O.haddoni" ~ "strobe",
      .$species == "O.major" ~ "strobe",
      .$species == "M.luctuosa" ~ "normal mimic",
      .$species == "M.bicolor" ~ "strobe mimic"
    )) %>% 
  filter(group!="5") %>% 
  select(-individual, -species) -> yo

# yotrain <- yo %>% filter(group!="3",group!="4")
# yospider <- yo %>% filter(group!="1",group!="2")
# 
# #train<- which(yo$group!="3" & yo$group!="4")
# 
# fit<-MASS::lda(group ~ sync+rhy+stopped+speed, data=yospider)
# plot(fit)
# fit
# 
# predict(fit, data=yospider)$class
# 
# 
# 
# rbind(
#   yotrain$group, #real
#   predict(fit, newdata=yotrain)$class %>% as.character()) #predicted
# 
# 
# 
# boxm <- heplots::boxM(yo[,c(-3,-4,-7)], yo$group) 
# 
# boxm
# plot(boxm)
# #could use this on individual columns
# car::leveneTest(speed ~ group, yo)
# 
# #MANOVA assumes multivariate normality. The function mshapiro.test( ) in the mvnormtest package produces the Shapiro-Wilk test for multivariate normality. Input must be a numeric matrix.
# mvnormtest::mshapiro.test(yo[,c(-3,-4,-7)] %>% as.matrix() %>% t())
# 

#-----------------------------


#



fit<-MASS::lda(group ~ sync+rhy+per+stopped+speed, data=yo)
plot(fit)
#now use matrix shit to get the LDA axes...
#LDvalues<- cbind(scale(as.matrix(yo[,c(-3,-4,-7)]),scale=FALSE) %*% fit$scaling,yo[,7,drop=FALSE])

#scrap that, let's just use predict()

LDvalues<-cbind(predict(fit)$x[,1:2],yo[,7,drop=FALSE])

#get proportion of trace explained
prop.trace <- (fit$svd^2)/sum((fit$svd^2))

ggplot(data=LDvalues, aes(x=LD1,y=LD2,col=group)) + 
  geom_point() + geom_text(aes(label = per.ind$species),size=5) + 
  theme(panel.background = element_blank(), legend.position = "none") + 
  xlab(sprintf("LD1 (%1.2f%%)", 100*prop.trace[1])) + 
  ylab(sprintf("LD2 (%1.2f%%)", 100*prop.trace[2])) +
  ggtitle("Linear Discriminant Analysis Between Groups")

barplot(fit$scaling[,1], main="Components in LD1")







#'
#' <hr />
#' <hr />
#' # Okay, the stuff below this is useless
#' 


# 
# 
# 
# ############Plot with rhythm by run##########
# pca.stated <-
#   big.db2 %>%
#   filter(name!="O.haddoni2_B",name!="O.haddoni4_B",name!="O.major1_B", name!="Smallgoldpoly2_A" )
# 
# pca.stated %<>% 
#   #select(Synchrony,Rhythmicity,Period, sd_movespeed, straightness) %>% 
#   mutate(Synchrony = sqrt(Synchrony),
#          Rhythmicity = log(Rhythmicity),
#          sd_movespeed = log(sd_movespeed),
#          straightness = car::logit(straightness)) # %>%   summarize_all( ~shapiro.test(.)$p.value)
# 
# 
# PCA_it(pca.stated, Synchrony,Rhythmicity,Period, sd_movespeed, straightness) -> test
# agricolae::kruskal(test$PC1, test$species,group=TRUE,p.adj="bonferroni")$groups
# 
# 
# 



#' 
#' 
#' 
#' #pca.stated<-big.db2
#' 
#' #' # Results
#' #' 
#' #' Preliminary stuff, but here!
#' #' 
#' #' ## PCA with only stop-start variables
#' #' 
#' #' These PCA plots are made using movement speed, pause duration, movement 
#' #' duration, "total period" duration, and their variances. Because of this, I 
#' #' didn't include the non-strobing ants. Also, I could combine all the 
#' #' un-interrupted runs that each individual had
#' 
#' #+ okay
#' 
#' 
#' #tapply(big.db$intervals, big.db$individual, bind_rows)
#' 
#' #+ stats, include=FALSE
#' INTERVAL.DB <- NULL
#' stats <- TrajsMergeStats(trajs, stat_generator)
#' rownames(stats) <- names(trajs) %>% unlist()
#' stats$species <- row.names(stats) %>%
#'   strapplyc("(.+)[0-9]_[A-Z]$") %>% unlist() %>% as.factor()
#' stats$individual <- row.names(stats) %>%
#'   strapplyc("(.+[0-9])_[A-Z]$") %>% unlist() %>% as.factor()
#' stats$run <- row.names(stats)
#' 
#' 
#' #' # Here's a PCA of each of the run segments
#' #' 
#' #' This is the same data, but the run segments are no longer combined by
#' #' the specific individual they came from. (This includes speed, sinuousity, etc)
#' 
#' #+ pca-dont-print1, include=FALSE
#' pca_maker(stats[c(1,2,3,4,5,6,7,8,15:17)], cutdownsource = F, FALSE, c("Goldcampo","Smallgoldpoly")) -> prcomped
#' pca_maker(stats[c(1,2,3,4,5,6,7,8,15:17)] %>% mutate(run=rownames(.)), cutdownsource = T, FALSE, c("Goldcampo","Smallgoldpoly")) -> pca.stated
#' 
#' #+ pcas1, fig.cap="This is made only using variables about the stopping and starting"
#' autoplot(prcomped,
#'          data=pca.stated %>% set_rownames(pca.stated$run),
#'          colour="species", label=T,
#'          loadings = TRUE, loadings.colour = 'blue',
#'          loadings.label = TRUE, loadings.label.size = 3, size=5, x=1,y=2)
#' 
#' 
#' #+ pca-dont-print2, include=FALSE
#' pca_maker(stats[c(1,3,5,7,15:17)], cutdownsource = F, FALSE, c("Goldcampo","Smallgoldpoly")) -> prcomped
#' pca_maker(stats[c(1,3,5,7,15:17)] %>% mutate(run=rownames(.)), cutdownsource = T, FALSE, c("Goldcampo","Smallgoldpoly")) -> pca.stated
#' 
#' #+ pcas2, fig.cap="This was made excluding the standard deviation variables from above."
#' autoplot(prcomped,
#'          data=pca.stated %>% set_rownames(pca.stated$run),
#'          colour="species", label=T,
#'          loadings = TRUE, loadings.colour = 'blue',
#'          loadings.label = TRUE, loadings.label.size = 3, size=5, x=1,y=2)
#' 
#' 
#' 
#' #+ pca-dont-print3, include=FALSE
#' pca_maker(stats[c(1:9,11:17)], cutdownsource = F, FALSE, c("Goldcampo","Smallgoldpoly")) -> prcomped
#' pca_maker(stats[c(1:9,11:17)] %>% mutate(run=rownames(.)), cutdownsource = T, FALSE, c("Goldcampo","Smallgoldpoly")) -> pca.stated
#' 
#' #+ pcas3, fig.cap="This last one includes EVERYTHING I have, like straightness of the trajectory and the estimated 'dominant frequencies' of their speed over time, etc."
#' autoplot(prcomped,
#'          data=pca.stated %>% set_rownames(pca.stated$run),
#'          colour="species", label=T,
#'          loadings = TRUE, loadings.colour = 'blue',
#'          loadings.label = TRUE, loadings.label.size = 3, size=5, x=1,y=2)
#' 
#' 
#' # 
#' # ggplot(stats %>% filter(species!="Goldcampo") %>% filter(species!="Smallgoldpoly"),
#' #        aes(y=med_movespeed, x=med_movedurs, color=species)) +
#' #   geom_point(size=6)
#' 
#' #' # Which variables matter?
#' #' Okay, now let's look at which variables they actually differ in.
#' #' 
#' #' * "med_" means "median value of _" and "durs" means duration. "freqs" refers
#' #' to the combined stop-start period.
#' #' * "dfreq[123]" refers to the "dominant frequencies" of the time series. It's
#' #' some confusing spectral analysis stuff, but it should theoretically
#' #' describe how the periods of stopping and starting act. I've included
#' #' the first three dominant frequencies.
#' #' * "nobu" (from my labmate Nobuaki) represents the time length of highest
#' #' rhythmicity, so it's kinda similar.
#' 
#' #+ var-compare, out.width=c('50%', '50%'), fig.show='hold', warning=FALSE
#' stats2 <- stats %>%
#'   filter(species!="Goldcampo") %>% filter(species!="Smallgoldpoly") %>%
#'   mutate(species=factor(species))
#' for (i in colnames(stats2)) {
#'   try(plot(stats2[[i]] ~ stats2[['species']],
#'            main=paste0("Comparing '", i, "' across strobing species"),
#'            ylab=i, xlab="species" ))
#' }
#' 
#' stats %>%
#'   filter(species!="Goldcampo") %>% filter(species!="Smallgoldpoly") %>%
#'   plot(data=., med_movedurs ~ species)
#' 
#' # 
#' # 
#' # # 
#' # # 
#' # INTERVAL.DB$species <-
#' #   INTERVAL.DB$filename %>% strapplyc("(.+)[0-9]_[A-Z]$") %>% unlist() %>% as.factor()
#' # 
#' # stops <- subset(INTERVAL.DB, source == "intervals" )
#' # moves <- subset(INTERVAL.DB, source == "REVERSEintervals" )
#' # stops %>% group_by(species) %>% mutate(duration =  remove_outliers(duration)) %>% na.omit() %>% ungroup() -> stopsgood
#' # 
#' 
#' # INTERVAL.DB %>% 
#' #   #filter(duration>0.03) %>% 
#' #   group_by(species) %>% mutate(duration =  remove_outliers(duration)) %>% na.omit() %>% ungroup() %>% filter(species!="Goldcampo") %>% filter(species!="Smallgoldpoly")  %>% mutate(species = species %>% as.numeric() %>% as.factor())->hey
#' # 
#' # 
#' # 
#' # ggplot(subset(hey, source=="REVERSEintervals"), aes(x=species, y=duration, fill=filename)) + 
#' #   geom_boxplot() 
#' 
#' 
#' 
#' #trajs[[20]] %>% TrajDerivatives() %>% {cbind(.$speed,c(0,.$acceleration))} %>% as.data.frame() %>%  segclust(seg.var=c("V1","V2"), lmin=5, Kmax=50, scale.variable=F, ncluster = c(2)) %>% plot()
#' 
#' #' # Other notes
#' #' Also, I think we found (as other people have) that when M.luctuosa pauses,
#' #' they wave their ("extra") front legs around like antennae to mimic ants better.
#' #' However, I *think* M.bicolor *doesn't* do that: they keep their front legs
#' #' still. Excitingly, when the Opisthopsis stop, unlike other ants, they
#' #' don't move their antennae at all. Mimicry!
#' #' 
#' 
#' #___Session info###############
#' 
#' #' # Session info
#' #' 
#' #+ session.info
#' sessionInfo()
#' 
#' #setwd("C:/Users/Andrew Burchill/Documents/Side Projects/spider-ant-mimic")
