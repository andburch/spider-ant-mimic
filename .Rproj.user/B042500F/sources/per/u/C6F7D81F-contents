  

#make the data nice and neat

bad_runs <- c("O.haddoni2_B","O.haddoni4_B","O.major1_x","O.major7_A","M.bicolor7_A","Smallgoldpoly1_A","Smallgoldpoly1_B")

path = "D:/Weaver ants/Dropbox (ASU)/Ant mimic strobing/Finished/"
files <- list.files(
  path= path,
  pattern = "[_][ABCDEF][.]csv", recursive = T
) %>% 
  paste0("D:/Weaver ants/Dropbox (ASU)/Ant mimic strobing/Finished/",.)

trajs <- NULL
for (i in files) {
  print(i)
  
  #create a temp trajectory from the filename
  i %>% cvs_reader_func() %>%
    TrajFromCoords(xCol = "x", yCol = "y", fps = 240, timeUnits = "s") -> traj
  
  #give them a filename attribute (for plotting labels)
  
  attr(traj, "wrong.filename") <- i %>% 
    strapplyc(paste0(
      str_sub(path,-5,-2),   #this is the "shed" from "Finished"
      "[/]([[:print:]]+[_][ABCDEF])[.]csv"
    ), simplify = T)
  
  trajs[[attr(traj, "wrong.filename")]] <- traj
  
}
trajs <- trajs[which(not(names(trajs) %in% bad_runs))] 


tibble(name = names(trajs),
       traj = unname(trajs)
)  %>% 
  mutate(species = name %>% strapplyc("(.+)[0-9]_[A-Z]$", s=T) %>% as.factor(),
         individual = name %>% strapplyc("(.+[0-9])_[A-Z]$", s=T) %>% as.factor()
  ) %>%  mutate(species = species %>% 
                  recode_factor("M.bicolor" = "M. bicolor",
                                "O.haddoni" = "O. haddoni",
                                "O.major" = "O. major",
                                "M.luctuosa" = "M. luctuosa",
                                "Smallgoldpoly" = "P. aurea",
                                "Goldcampo" = "C. bigenus"),
                individual = paste0(species, str_sub(individual, -1,-1)),
                ) -> test.db


test.db %>% 
  group_by(individual) %>% mutate(letter_code=LETTERS[1:n()]) %>% ungroup() %>% 
  group_by(species) %>% mutate(number_code=as.factor(individual) %>% as.numeric()) %>% ungroup() %>% 
  mutate(individual = paste0(species,number_code),
         name = paste0(species,number_code,"_",letter_code)) %>% 
  select(name, traj, individual, species) %>% group_by(name) %>% 
  mutate(traj=map(traj, ~`attr<-`(.,"filename",name))) %>% 
  ungroup() %>% 
  saveRDS(file="raw_data.RDS")

trajs <- readRDS("raw_data.RDS")



######################








per.ind <-
  big.db2 %>%
  filter(name!="O.haddoni2_B",name!="O.haddoni4_B",name!="O.major1_x", name!="O.major7_A", name!="M.bicolor7_A",name!="Smallgoldpoly1_A",name!="Smallgoldpoly1_B") %>% 
  group_by(individual, species) %>%
  summarize(
    # med_sync = log(median(Synchrony)),
    # med_rhy = log(median(Rhythmicity)),
    # med_per = median(Period),
    # med_str = median(straightness)
    sync = (weighted.mean(Synchrony, total_time)),
    rhy = (weighted.mean(Rhythmicity, total_time)),
    per = (weighted.mean(Period, total_time)),
    str = (weighted.mean(straightness, total_time)),
    stopped = weighted.mean(prop_time_stopped, total_time),
    speed = (weighted.mean(avg.speed, total_time))
    #sd_speed = log(weighted.mean(sd.speed, total_time))
    
  ) %>% ungroup() 



nmds <- per.ind %>% select(-individual, -species) %>%  as.matrix() %>% metaMDS(autotransform = F, k=2)

scrs <- scores(nmds, display = 'sites')

scrs <- cbind(as.data.frame(scrs), species = per.ind$species)
cent <- aggregate(cbind(NMDS1, NMDS2) ~ species, data = scrs, FUN = mean)
segs <- merge(scrs, setNames(cent, c('species','oNMDS1','oNMDS2')),
             by = 'species', sort = FALSE)

ggplot(scrs, aes(x = NMDS1, y = NMDS2, colour = species)) +
  geom_segment(data = segs,
               mapping = aes(xend = oNMDS1, yend = oNMDS2)) + # spiders
  geom_point(data = cent, size = 5) +                         # centroids
  geom_point() +                                              # sample scores
  coord_fixed()  


autoplot(nmds,
         data=per.ind %>% set_rownames(per.ind$species),
         colour="species", label=T,
         loadings = TRUE, loadings.colour = 'blue',
         loadings.label = TRUE, loadings.label.size = 3, size=5, x=1,y=2) %>%
  plot()











phylo.relatedness <- per.ind %>% 
  mutate(
    group = case_when(
      .$species == "Goldcampo" ~ "1",
      .$species == "Smallgoldpoly" ~ "1",
      .$species == "O.haddoni" ~ "1",
      .$species == "O.major" ~ "1",
      .$species == "M.luctuosa" ~ "2",
      .$species == "M.bicolor" ~ "2"
    )) %>% .$group

mimicry.relatedness <- per.ind %>% 
  mutate(
    group = case_when(
      .$species == "Goldcampo" ~ "1",
      .$species == "Smallgoldpoly" ~ "1",
      .$species == "O.haddoni" ~ "2",
      .$species == "O.major" ~ "2",
      .$species == "M.luctuosa" ~ "1",
      .$species == "M.bicolor" ~ "2"
    )) %>% .$group
  
  

granular.relatedness <- per.ind %>% 
  mutate(
    group = case_when(
      .$species == "Goldcampo" ~ "1",
      .$species == "Smallgoldpoly" ~ "1",
      .$species == "O.haddoni" ~ "2",
      .$species == "O.major" ~ "2",
      .$species == "M.luctuosa" ~ "3",
      .$species == "M.bicolor" ~ "4"
    )) %>% .$group

per.ind[-1:-2] %>% scale %>% dist() %>%
  cluster.stats(., clustering = as.numeric(phylo.relatedness)) -> phy


per.ind[-1:-2] %>% scale %>% dist() %>%
  cluster.stats(., clustering = as.numeric(mimicry.relatedness)) -> mim

cbind(mim,phy)



fviz_dend(clustd, cex = 0.7, palette = "jco", rect = TRUE, rect_fill = TRUE, rect_border = "jco", labels_track_height = 1.8)




per.ind %>% as.data.frame() %>% 
  set_rownames(per.ind %>%
                 mutate(species = species %>% 
                          recode_factor("M.bicolor" = "M .bicolor",
                                        "O.haddoni" = "O. haddoni",
                                        "O.major" = "O. major",
                                        "M.luctuosa" = "M. luctuosa",
                                        "Smallgoldpoly" = "P. aurea",
                                        "Goldcampo" = "C. bigenus"
                          ),
                        individual = paste0(species, str_sub(individual, -1,-1))
                 ) %>% .$individual
  ) %>% .[-1:-2] %>% scale %>% dist() %>% hcut(k=2) %>% 
  fviz_dend(., cex = 0.7, palette = "jco", rect = TRUE, rect_fill = TRUE, rect_border = "jco", labels_track_height = 1.8)

per.ind %>% as.data.frame() %>% 
  set_rownames(per.ind %>% 
                 mutate(species = species %>% 
                          recode_factor("M.bicolor" = "M .bicolor",
                                        "O.haddoni" = "O. haddoni",
                                        "O.major" = "O. major",
                                        "M.luctuosa" = "M. luctuosa",
                                        "Smallgoldpoly" = "P. aurea",
                                        "Goldcampo" = "C. bigenus"
                          ),
                        individual = paste0(species, str_sub(individual, -1,-1))
                 ) %>% .$individual
  ) %>% .[-1:-2] %>% scale %>% dist() %>% hcut(k=2)  %>% 
  fviz_cluster(., data=per.ind[-1:-2], repel = TRUE, show.clust.cent = TRUE, palette = "jco", ggtheme = theme_minimal(), main = "Factor map")











per.ind[-1:-2] %>%
  scale %>%
  clusterCrit::intCriteria(.,as.integer(mimicry.relatedness),
                           "all") -> mim2

per.ind[-1:-2] %>%
  scale %>%
  clusterCrit::intCriteria(.,as.integer(phylo.relatedness),
                           "all") -> phy2

do.call(rbind, Map(cbind, mim2, phy2)) -> matrixboi

a<-NULL
num<-NULL
for (i in getCriteriaNames(T)) {
  num<-which(getCriteriaNames(T)==i)
  print(i)
  print(bestCriterion(matrixboi[num,], i))
  a[num] <- bestCriterion(matrixboi[num,], i)
}

a %>% na.omit() %>% table() %>% binom.test(.,p=0.5)





  per.ind %>% 
    mutate(
      group = case_when(
        .$species == "Goldcampo" ~ "1",
        .$species == "Smallgoldpoly" ~ "1",
        .$species == "O.haddoni" ~ "2",
        .$species == "O.major" ~ "2",
        .$species == "M.luctuosa" ~ "3",
        .$species == "M.bicolor" ~ "4"
      )) %>% 
    filter(group!="5") %>% 
    select(-individual, -species) -> yo
  
  yotrain <- yo %>% filter(group!="3",group!="4")
  yospider <- yo %>% filter(group!="1",group!="2")
  
  #train<- which(yo$group!="3" & yo$group!="4")
  
  fit<-MASS::lda(group ~ sync+rhy+stopped+speed, data=yospider)
  plot(fit)
  fit
  
  predict(fit, data=yospider)$class
  
  
  
  rbind(
    yotrain$group, #real
    predict(fit, newdata=yotrain)$class %>% as.character()) #predicted
  
  
  
  boxm <- heplots::boxM(yo[,c(-3,-4,-7)], yo$group) 
  
  boxm
  plot(boxm)
  #could use this on individual columns
  car::leveneTest(speed ~ group, yo)
  
  #MANOVA assumes multivariate normality. The function mshapiro.test( ) in the mvnormtest package produces the Shapiro-Wilk test for multivariate normality. Input must be a numeric matrix.
  mvnormtest::mshapiro.test(yo[,c(-3,-4,-7)] %>% as.matrix() %>% t())
  
  
  #-----------------------------
  
  
  #
  
  fit<-MASS::lda(group ~ sync+rhy+per+stopped+speed, data=yo)
  plot(fit)
  #now use matrix shit to get the LDA axes...
  #LDvalues<- cbind(scale(as.matrix(yo[,c(-3,-4,-7)]),scale=FALSE) %*% fit$scaling,yo[,7,drop=FALSE])
  
  #scrap that, let's just use predict()
  
  LDvalues<-cbind(predict(fit)$x[,1:2],yo[,7,drop=FALSE])
  
  #get proportion of trace explained
  prop.trace <- (fit$svd^2)/sum((fit$svd^2))
  
  ggplot(data=LDvalues, aes(x=LD1,y=LD2,col=group)) + 
    geom_point() + geom_text(aes(label = per.ind$species),size=5) + 
    theme(panel.background = element_blank(), legend.position = "none") + 
    xlab(sprintf("LD1 (%1.2f%%)", 100*prop.trace[1])) + 
    ylab(sprintf("LD2 (%1.2f%%)", 100*prop.trace[2])) +
    ggtitle("Linear Discriminant Analysis Between Groups")
  
barplot(fit$scaling[,1], main="Components in LD1")
  
  
  
  
  
  
  
  
  
  
  
  
  
